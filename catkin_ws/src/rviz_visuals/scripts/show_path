#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import PoseStamped
import math

def publish_circle():
    # Initialize ROS node
    rospy.init_node('circle_pose_publisher', anonymous=True)
    
    # Create a publisher for PoseStamped
    pub = rospy.Publisher('/circle_pose', PoseStamped, queue_size=10)
    
    # Define the rate at which to publish the message
    rate = rospy.Rate(10)  # 10 Hz
    
    # Define parameters for the circle
    radius = 1.0  # Radius of the circle
    center_x, center_y = 0.0, 0.0  # Center of the circle
    angular_velocity = 0.1  # Angular velocity (radians per second)
    
    start_time = rospy.get_time()
    
    while not rospy.is_shutdown():
        # Calculate the current time
        current_time = rospy.get_time()
        elapsed_time = current_time - start_time
        
        # Calculate the x and y position on the circle
        x = center_x + radius * math.cos(angular_velocity * elapsed_time)
        y = center_y + radius * math.sin(angular_velocity * elapsed_time)
        
        # Create a PoseStamped message
        pose = PoseStamped()
        pose.header.stamp = rospy.Time.now()
        pose.header.frame_id = "map"  # Change if needed
        pose.pose.position.x = x
        pose.pose.position.y = y
        pose.pose.position.z = 0.0
        
        # Orientation (optional: keeping it identity quaternion for simplicity)
        pose.pose.orientation.x = 0.0
        pose.pose.orientation.y = 0.0
        pose.pose.orientation.z = 0.0
        pose.pose.orientation.w = 1.0
        
        # Publish the PoseStamped message
        pub.publish(pose)
        
        # Sleep to maintain the loop rate
        rate.sleep()

if __name__ == '__main__':
    try:
        publish_circle()
    except rospy.ROSInterruptException:
        pass
